#!/usr/bin/env node
const program = require('commander')
const path = require('path')
const fs = require('fs')
const crowPreset = require('babel-preset-crow')
const chalk = require('chalk')
const { webpack, packageJsonStats } = require('../helpers')

program
  .description('Bundle code using webpack and babel-preset-crow')
  .arguments('<<bundle-file> <entry-file>...>')
  .option('--target-browsers', 'set bundle to target browsers')
  .option('--browserslist <browsers...>', 'list of browsers to target, check browserl.ist. Defaults to "last 2 versions, >1%"')
  .option('--target-node', 'set bundle to target node')
  .option('--node-version <node-version>', 'node version to target. Defaults to "process.versions.node"')
  .option('--enable-loose', 'enable loose option on babel plugins')
  .option('--enable-debug', 'enable debug option on babel plugins')
  .option('--enable-spec', 'enable spec option on babel plugins')
  .option('--enable-use-built-ins', 'enable useBuiltIns option on babel plugins')
  .option('--css-bundle-file <path>', 'define css bundle path. Defaults to "assets/styles.[chunkhash:8].css"')
  .option('--disable-css', 'disables css bundling')
  .option('--manifest-file <path>', 'define manifest file path. Defaults to "assets/manifest.json"')
  .option('--disable-manifest', 'disables manifest file generation')
  .option('--media-file <path>', 'define media file path. Defaults to "assets/media/[name].[hash:8].[ext]"')
  .option('--media-inline-limit <bytes>', 'media inline limit in bytes. Defaults to 10000')
  .option('--media-inline-extension <regexps...>', 'list of regexps elegible for inlining. Defaults to "\\.bmp$,\\.gif$,\\.jpe?g$,\\.png$"')
  .on('--help', console.log.bind(this,
`
  Examples:

    $ crow-scripts webpack --target-browsers "last 1 Chrome version" "assets/main" "src"

`))
  .parse(process.argv)

// stop program if no arguments were passed
if (program.args.length === 0) return program.help()

const browserslist = program.browserslist || "last 2 versions, >1%"
const nodeVersion = program.nodeVersion || process.versions.node

const targets = {}
if (program.targetBrowsers) targets.browsers = browserslist.split(/\s*,\s*/)
if (program.targetNode) targets.node = nodeVersion

const loose = !!program.enableLoose
const debug = !!program.enableDebug
const spec = !!program.enableSpec
const useBuiltIns = !!program.enableUseBuiltIns

const entry = {}
for (let step = 0; step < program.args.length; step += 2) {
  entry[program.args[step]] = path.resolve(process.cwd(), program.args[step + 1])
}

const cssBundleFile = program.cssBundleFile || 'assets/styles.[chunkhash:8].css'
const disableCSS = !!program.disableCss
const manifestFile = program.manifestFile || 'assets/manifest.json'
const disableManifest = !!program.disableManifest
const mediaFile = program.mediaFile || 'assets/media/[name].[hash:8].[ext]'
const mediaInlineLimit = program.mediaInlineLimit || 10000
const mediaFileExtension = (program.mediaFileExtension || "\\.bmp$,\\.gif$,\\.jpe?g$,\\.png$").
  split(/\s*,\s*/).
  map((s) => new RegExp(s))

webpack({
  entry,
  targets,
  browserslist,
  loose,
  debug,
  spec,
  useBuiltIns,
  cssBundleFile,
  manifestFile,
  disableCSS,
  disableManifest,
  mediaFile,
  mediaInlineLimit,
  mediaFileExtension,
  libraryName: packageJsonStats().namePascalCase,
})
