#!/usr/bin/env node
const program = require('commander')
const path = require('path')
const { transpile } = require('../helpers')
const crowPreset = require('babel-preset-crow')

program
  .description('Transpile code using babel-preset-crow')
  .option('--source-dir <path>', 'source dir to transpile. Defaults to "src"')
  .option('--dest-dir <path>', 'destination dir to transpile. Defaults to "build"')
  .option('--ignore-matched <regexps...>', 'list of regexps to ignore. Defaults to "__tests__,__mocks__,\\.css$,\\.flowconfig$"')
  .option('--transpile-only <regexps...>', 'list of regexps to transpile, the rest will be copied. Defaults to "\\.jsx?$"')
  .option('--target-browsers <browserslist...>', 'list of browsers to target, check browserl.ist. Example: "last 2 versions,> 1%"')
  .option('--target-node <node-version>', 'node version to target, use "current" to last version')
  .option('--ignore-require-extensions <extensions...>', 'remove require() entries from blacklisted extension list. Example: ".css,.scss,.sass"')
  .option('--modules <type>', 'define es6 module syntax transformtion. Defaults to "commonjs"')
  .option('--disable-modules', 'disable es6 module transformation')
  .option('--enable-loose', 'enable loose option on babel plugins')
  .option('--enable-debug', 'enable debug option on babel plugins')
  .option('--enable-spec', 'enable spec option on babel plugins')
  .option('--enable-use-built-ins', 'enable useBuiltIns option on babel plugins')
  .parse(process.argv)

const sourceDir = path.resolve(process.cwd(), program.sourceDir || 'src')
const destDir = path.resolve(process.cwd(), program.destDir || 'browser')

const ignoreMatched = (program.ignoreMatched || "__tests__,__mocks__,\\.css$,\\.flowconfig$").
  split(/\s*,\s*/).
  map((s) => new RegExp(s))
const transpileOnly = (program.transpileOnly || "\\.jsx?$").
  split(/\s*,\s*/).
  map((s) => new RegExp(s))

const targets = {}
if (program.targetBrowsers) {
  targets.browsers = program.targetBrowsers.split(/\s*,\s*/)
}
if (program.targetNode) {
  targets.node = program.targetNode
}

const loose = !!program.enableLoose
const debug = !!program.enableDebug
const spec = !!program.enableSpec
const useBuiltIns = !!program.enableUseBuiltIns
const modules = program.disableModule ? false : (program.modules || 'commonjs')
const ignoreRequireExtensions = (program.ignoreRequireExtensions || '').split(/\s*,\s*/)

transpile({
  origin: sourceDir,
  destination: destDir,
  ignore: ignoreMatched,
  transpileOnly,
  preset: crowPreset({
    targets,
    loose,
    debug,
    spec,
    useBuiltIns,
    modules,
    ignoreRequireExtensions,
  })
})
