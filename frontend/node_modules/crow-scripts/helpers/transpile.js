const fs = require('fs')
const path = require('path')
const babel = require('babel-core')
const chalk = require('chalk')

// Run callback() for every file at dir
const walk = (dir, callback) => {
  fs.readdir(dir, (err, files) => {
    if (err) throw err
    files.forEach(file => {
      const filePath = path.join(dir, file)
      fs.stat(filePath, (err, stats) => {
        if (err) throw err
        stats.isDirectory()
        ? walk(filePath, callback)
        : callback(filePath)
      })
    })
  })
}

// Create dir and run callback() at the end
const mkdirp = (dir, callback) => {
  const topDir = path.dirname(dir)
  fs.access(topDir, fs.R_OK, err => {
    err
    ? mkdirp(topDir, () => fs.mkdir(dir, callback))
    : fs.mkdir(dir, callback)
  })
}

const reject = (array, filePath) => array.reduce(
  (shouldIgnore, curr) => (shouldIgnore || curr.test(filePath)),
  false
)

const accept = (array, filePath) => array.reduce(
  (shouldContinue, curr) => (shouldContinue && curr.test(filePath)),
  true
)

// Transpile file.
const transpileFile = ({
  origin,
  destination,
  filePath,
  preset
}) => {
  createFile(origin, destination, filePath, newFilePath => () => {
    // Call babel to transpile file.
    babel.transformFile(
      filePath,
      { presets: [ preset ] },
      (err, result) => {
        if (err) throw err
        // write transpiled file
        fs.writeFile(newFilePath, result.code, err => {
          if (err) throw err
        })
      }
    )
    // Write .js.flow if it has flow type definitions
    fs.readFile(filePath, (err, data) => {
      if (err) throw err
      // exits if file doesn't have flow tag //@flow at the top
      if (! /^\s*\/\/\s*@flow/.test(data)) return
      fs.writeFile(`${newFilePath}.flow`, data, (err) => {
        if (err) throw err
      })
    })
  })
}

// Copy file.
const copyFile = ({
  origin,
  destination,
  filePath
}) => {
  createFile(origin, destination, filePath, newFilePath => () => {
    // Copy file into newFilePath.
    fs.readFile(filePath, (err, data) => {
      if (err) throw err
      fs.writeFile(newFilePath, data, (err) => {
        if (err) throw err
      })
    })
  })
}

const createFile = (origin, destination, filePath, callbackHOF) => {
  // Remove src base path.
  const newFilePath = filePath.replace(origin, destination)
  // Ensure newFilePath directory is created.
  mkdirp(path.dirname(newFilePath), callbackHOF(newFilePath))
}

// Transpile Folder
const transpile = ({
  origin,
  destination,
  preset,
  ignore = [ /__tests__/, /__mocks__/, /\.css$/, /\.flowconfig/ ],
  transpileOnly = [ /\.jsx?$/ ]
}) => walk(
  origin,
  filePath => {
    // Halt if file path is in ignore list.
    if ( reject(ignore, filePath) ) return false
    // Check if file is to be transpiled or copied.
    if ( accept(transpileOnly, filePath) ) {
      transpileFile({ origin, destination, filePath, preset })
    } else {
      copyFile({ origin, destination, filePath })
    }
  }
)

module.exports = transpile
