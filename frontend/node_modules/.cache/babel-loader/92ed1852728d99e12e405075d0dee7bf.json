{"ast":null,"code":"import { extendDataItem, mapTree } from '@progress/kendo-react-common';\nvar GROUP_ID_FIELD = 'groupId';\nvar GROUP_SUBITEMS_COLLECTION = 'items';\n/**\n * @hidden\n */\n\nvar setGroupId = function (group, depth, parentValue) {\n  if (group.items) {\n    group[GROUP_ID_FIELD] = \"\" + parentValue + (parentValue && '_') + group.value + group.field;\n\n    if (depth > 1) {\n      group.items.forEach(function (item) {\n        return setGroupId(item, depth - 1, group[GROUP_ID_FIELD]);\n      });\n    }\n  }\n};\n/**\n * Add unique ids to the group items inside data.\n *\n * @param {{data: any[], group: GroupDescriptor[]}} options - The options to be processed.\n */\n\n\nexport var setGroupIds = function (options) {\n  var group = options.group;\n\n  if (group && group.length && options.data) {\n    return options.data.forEach(function (item) {\n      return setGroupId(item, group.length, '');\n    });\n  }\n};\n/**\n * Get all group ids from the data.\n *\n * @param {{data: any[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\n\nexport var getGroupIds = function (options) {\n  var groupIds = [];\n  mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n    if (item[GROUP_ID_FIELD]) {\n      groupIds.push(item[GROUP_ID_FIELD]);\n    }\n  });\n  return groupIds;\n};\n/**\n * Apply the `expanded` prop to the group items in data based on the provided collection of group ids.\n *\n * @param {{data: any[], collapsedIds: string[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\n\nexport var setExpandedState = function (options) {\n  // TODO: no need to traverse whole tree, only group levels\n  return mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n    return extendDataItem(item, GROUP_SUBITEMS_COLLECTION, {\n      expanded: !options.collapsedIds.some(function (groupId) {\n        return groupId === item[GROUP_ID_FIELD];\n      })\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Admin/LeadManagement/frontend/node_modules/@progress/kendo-react-data-tools/dist/es/utils/group-operations.js"],"names":["extendDataItem","mapTree","GROUP_ID_FIELD","GROUP_SUBITEMS_COLLECTION","setGroupId","group","depth","parentValue","items","value","field","forEach","item","setGroupIds","options","length","data","getGroupIds","groupIds","push","setExpandedState","expanded","collapsedIds","some","groupId"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,QAAwC,8BAAxC;AACA,IAAIC,cAAc,GAAG,SAArB;AACA,IAAIC,yBAAyB,GAAG,OAAhC;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,WAAxB,EAAqC;AAClD,MAAIF,KAAK,CAACG,KAAV,EAAiB;AACbH,IAAAA,KAAK,CAACH,cAAD,CAAL,GAAwB,KAAKK,WAAL,IAAoBA,WAAW,IAAI,GAAnC,IAA0CF,KAAK,CAACI,KAAhD,GAAwDJ,KAAK,CAACK,KAAtF;;AACA,QAAIJ,KAAK,GAAG,CAAZ,EAAe;AACXD,MAAAA,KAAK,CAACG,KAAN,CAAYG,OAAZ,CAAoB,UAAUC,IAAV,EAAgB;AAAE,eAAOR,UAAU,CAACQ,IAAD,EAAON,KAAK,GAAG,CAAf,EAAkBD,KAAK,CAACH,cAAD,CAAvB,CAAjB;AAA4D,OAAlG;AACH;AACJ;AACJ,CAPD;AAQA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIW,WAAW,GAAG,UAAUC,OAAV,EAAmB;AACxC,MAAIT,KAAK,GAAGS,OAAO,CAACT,KAApB;;AACA,MAAIA,KAAK,IAAIA,KAAK,CAACU,MAAf,IAAyBD,OAAO,CAACE,IAArC,EAA2C;AACvC,WAAOF,OAAO,CAACE,IAAR,CAAaL,OAAb,CAAqB,UAAUC,IAAV,EAAgB;AAAE,aAAOR,UAAU,CAACQ,IAAD,EAAOP,KAAK,CAACU,MAAb,EAAqB,EAArB,CAAjB;AAA4C,KAAnF,CAAP;AACH;AACJ,CALM;AAMP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,WAAW,GAAG,UAAUH,OAAV,EAAmB;AACxC,MAAII,QAAQ,GAAG,EAAf;AACAjB,EAAAA,OAAO,CAACa,OAAO,CAACE,IAAT,EAAeb,yBAAf,EAA0C,UAAUS,IAAV,EAAgB;AAC7D,QAAIA,IAAI,CAACV,cAAD,CAAR,EAA0B;AACtBgB,MAAAA,QAAQ,CAACC,IAAT,CAAcP,IAAI,CAACV,cAAD,CAAlB;AACH;AACJ,GAJM,CAAP;AAKA,SAAOgB,QAAP;AACH,CARM;AASP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,gBAAgB,GAAG,UAAUN,OAAV,EAAmB;AAC7C;AACA,SAAOb,OAAO,CAACa,OAAO,CAACE,IAAT,EAAeb,yBAAf,EAA0C,UAAUS,IAAV,EAAgB;AACpE,WAAOZ,cAAc,CAACY,IAAD,EAAOT,yBAAP,EAAkC;AACnDkB,MAAAA,QAAQ,EAAE,CAACP,OAAO,CAACQ,YAAR,CAAqBC,IAArB,CAA0B,UAAUC,OAAV,EAAmB;AAAE,eAAOA,OAAO,KAAKZ,IAAI,CAACV,cAAD,CAAvB;AAA0C,OAAzF;AADwC,KAAlC,CAArB;AAGH,GAJa,CAAd;AAKH,CAPM","sourcesContent":["import { extendDataItem, mapTree } from '@progress/kendo-react-common';\nvar GROUP_ID_FIELD = 'groupId';\nvar GROUP_SUBITEMS_COLLECTION = 'items';\n/**\n * @hidden\n */\nvar setGroupId = function (group, depth, parentValue) {\n    if (group.items) {\n        group[GROUP_ID_FIELD] = \"\" + parentValue + (parentValue && '_') + group.value + group.field;\n        if (depth > 1) {\n            group.items.forEach(function (item) { return setGroupId(item, depth - 1, group[GROUP_ID_FIELD]); });\n        }\n    }\n};\n/**\n * Add unique ids to the group items inside data.\n *\n * @param {{data: any[], group: GroupDescriptor[]}} options - The options to be processed.\n */\nexport var setGroupIds = function (options) {\n    var group = options.group;\n    if (group && group.length && options.data) {\n        return options.data.forEach(function (item) { return setGroupId(item, group.length, ''); });\n    }\n};\n/**\n * Get all group ids from the data.\n *\n * @param {{data: any[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\nexport var getGroupIds = function (options) {\n    var groupIds = [];\n    mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n        if (item[GROUP_ID_FIELD]) {\n            groupIds.push(item[GROUP_ID_FIELD]);\n        }\n    });\n    return groupIds;\n};\n/**\n * Apply the `expanded` prop to the group items in data based on the provided collection of group ids.\n *\n * @param {{data: any[], collapsedIds: string[]}} options - The options to be processed.\n * @returns {string[]} - Collection of all group ids from the data.\n */\nexport var setExpandedState = function (options) {\n    // TODO: no need to traverse whole tree, only group levels\n    return mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function (item) {\n        return extendDataItem(item, GROUP_SUBITEMS_COLLECTION, {\n            expanded: !options.collapsedIds.some(function (groupId) { return groupId === item[GROUP_ID_FIELD]; })\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}