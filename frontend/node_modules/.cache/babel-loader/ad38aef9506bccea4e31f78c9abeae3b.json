{"ast":null,"code":"import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n/* eslint-disable max-len */\n\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.intl ? component.context.intl : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.localization ? component.context.localization : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForIntl(component) {\n  component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForLocalization(component) {\n  component.contextType = GlobalizationContext;\n} // tslint:enable:max-line-length","map":{"version":3,"sources":["C:/Users/Admin/LeadManagement/frontend/node_modules/@progress/kendo-react-intl/dist/es/intlUtils.js"],"names":["IntlService","LocalizationService","GlobalizationContext","provideIntlService","component","process","env","NODE_ENV","context","intl","provideLocalizationService","localization","registerForIntl","contextType","registerForLocalization"],"mappings":"AAAA,SAASA,WAAT,QAA4B,oBAA5B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AAC1C,MAAI,CAACA,SAAD,IAAcC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAwBH,SAAxB,GAAoC,cAA1C;AACH;;AACD,SAAOA,SAAS,CAACI,OAAV,IAAqBJ,SAAS,CAACI,OAAV,CAAkBC,IAAvC,GACDL,SAAS,CAACI,OAAV,CAAkBC,IADjB,GAED,IAAIT,WAAJ,CAAgB,IAAhB,CAFN;AAGH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,0BAAT,CAAoCN,SAApC,EAA+C;AAClD,MAAI,CAACA,SAAD,IAAcC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAwBH,SAAxB,GAAoC,cAA1C;AACH;;AACD,SAAOA,SAAS,CAACI,OAAV,IAAqBJ,SAAS,CAACI,OAAV,CAAkBG,YAAvC,GACDP,SAAS,CAACI,OAAV,CAAkBG,YADjB,GAED,IAAIV,mBAAJ,EAFN;AAGH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASW,eAAT,CAAyBR,SAAzB,EAAoC;AACvCA,EAAAA,SAAS,CAACS,WAAV,GAAwBX,oBAAxB;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,uBAAT,CAAiCV,SAAjC,EAA4C;AAC/CA,EAAAA,SAAS,CAACS,WAAV,GAAwBX,oBAAxB;AACH,C,CACD","sourcesContent":["import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n/* eslint-disable max-len */\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideIntlService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    return component.context && component.context.intl\n        ? component.context.intl\n        : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideLocalizationService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    return component.context && component.context.localization\n        ? component.context.localization\n        : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForIntl(component) {\n    component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForLocalization(component) {\n    component.contextType = GlobalizationContext;\n}\n// tslint:enable:max-line-length\n"]},"metadata":{},"sourceType":"module"}