{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // Gets and sets the children. Returns the children or the re-created item with the new children.\n\n\nfunction children(item, subItemsField, subItems) {\n  var _a;\n\n  if (subItems) {\n    return __assign({}, item, (_a = {}, _a[subItemsField] = subItems.length ? subItems.slice() : undefined, _a));\n  } else {\n    return item && item[subItemsField] ? item[subItemsField].slice() : [];\n  }\n}\n\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n  if (dataItem[subItemsField]) {\n    var subItems = children(dataItem, subItemsField).map(function (child) {\n      return mapItem(child, subItemsField, callbackfn);\n    });\n    return callbackfn(children(dataItem, subItemsField, subItems));\n  }\n\n  return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\n\nexport var mapTree = function (tree, subItemsField, callback) {\n  return tree.map(function (item) {\n    return mapItem(item, subItemsField, callback);\n  }).slice();\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\n\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n  var curData = tree;\n  var parentNodes = [];\n\n  for (var i = 0; i < level.length; i++) {\n    curData = curData[level[i]];\n    curData = Array.isArray(curData) ? curData : curData[subItemsField];\n    parentNodes.push(curData);\n  }\n\n  var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n  var newItemIndex = level[level.length - 1];\n  var newItem = callback(parent[newItemIndex]);\n  parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\n\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n  var _a;\n\n  return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\n\nexport var getItemPath = function (tree, level, subItemsField) {\n  var nodes = [];\n  var itemLevel = level.slice();\n\n  if (itemLevel.length) {\n    var element = tree[itemLevel.shift() || 0];\n    nodes.push(element);\n\n    while (itemLevel.length && subItemsField) {\n      element = element[subItemsField][itemLevel.shift() || 0];\n      nodes.push(element);\n    }\n  }\n\n  return nodes;\n};","map":{"version":3,"sources":["C:/Users/Admin/LeadManagement/frontend/node_modules/@progress/kendo-react-common/dist/es/treeDataOperations.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","children","item","subItemsField","subItems","_a","slice","undefined","mapItem","dataItem","callbackfn","map","child","mapTree","tree","callback","mapTreeItem","level","curData","parentNodes","Array","isArray","push","parent","newItemIndex","newItem","splice","extendDataItem","propsToExtend","getItemPath","nodes","itemLevel","element","shift"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Gets and sets the children. Returns the children or the re-created item with the new children.\nfunction children(item, subItemsField, subItems) {\n    var _a;\n    if (subItems) {\n        return __assign({}, item, (_a = {}, _a[subItemsField] = subItems.length ? subItems.slice() : undefined, _a));\n    }\n    else {\n        return item && item[subItemsField] ? item[subItemsField].slice() : [];\n    }\n}\nfunction mapItem(dataItem, subItemsField, callbackfn) {\n    if (dataItem[subItemsField]) {\n        var subItems = children(dataItem, subItemsField).map(function (child) { return mapItem(child, subItemsField, callbackfn); });\n        return callbackfn(children(dataItem, subItemsField, subItems));\n    }\n    return callbackfn(dataItem);\n}\n/**\n * Creates a new array with the results of calling the provided callback function\n * on every element in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTree = function (tree, subItemsField, callback) {\n    return tree.map(function (item) { return mapItem(item, subItemsField, callback); }).slice();\n};\n/**\n * Creates a new array with the results of calling the provided callback function\n * on the element which match the `level` in the provided data tree.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - An array of indexes of each parent and current item in the data tree.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {(value: any) => any} callback - The callback function.\n * @returns {any[]} - The new data tree.\n */\nexport var mapTreeItem = function (tree, level, subItemsField, callback) {\n    var curData = tree;\n    var parentNodes = [];\n    for (var i = 0; i < level.length; i++) {\n        curData = curData[level[i]];\n        curData = Array.isArray(curData) ? curData : curData[subItemsField];\n        parentNodes.push(curData);\n    }\n    var parent = parentNodes.length > 1 ? parentNodes[parentNodes.length - 2] : tree;\n    var newItemIndex = level[level.length - 1];\n    var newItem = callback(parent[newItemIndex]);\n    parent.splice(newItemIndex, 1, newItem);\n};\n/**\n * Similar to the `Object.assign` function. Additionally, creates a new array for the subitems.\n *\n * @param {object} item - The source data item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @param {object} propsToExtend - The props with which the source data item will be extended.\n * @returns {object} - The target data item.\n */\nexport var extendDataItem = function (item, subItemsField, propsToExtend) {\n    var _a;\n    return Object.assign({}, item, item[subItemsField] ? (_a = {}, _a[subItemsField] = item[subItemsField].slice(), _a) : {}, propsToExtend || {});\n};\n/**\n * Returns the data item path in the tree based on the level parameter.\n *\n * @param {any[]} tree - The data tree.\n * @param {number[]} level - The level of the target tree item.\n * @param {string} subItemsField - The field which points to the subitems collection of each data item.\n * @returns {any[]} - The path of the data item.\n */\nexport var getItemPath = function (tree, level, subItemsField) {\n    var nodes = [];\n    var itemLevel = level.slice();\n    if (itemLevel.length) {\n        var element = tree[itemLevel.shift() || 0];\n        nodes.push(element);\n        while (itemLevel.length && subItemsField) {\n            element = element[subItemsField][itemLevel.shift() || 0];\n            nodes.push(element);\n        }\n    }\n    return nodes;\n};\n"]},"metadata":{},"sourceType":"module"}